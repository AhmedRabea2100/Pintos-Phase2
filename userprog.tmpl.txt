             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Rabea Salem
Marwan Mahmoud Ibraim
Yousef Ashraf Youssef
Mahmoud Ramzy
Mahmoud Abdulrazik

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
We changed in thread.h and added some new variables in struct thread:
struct thread
  {
    struct thread* parent;             /* pointer to parent of this thread */
    struct list children_list;              /* holds children for this thread */
    struct list_elem childelem;         /* used by children list */
    bool creationFLag;       /* is creation done succesfully*/
    int childStatus;                              
    tid_t child_waiting_for;               /* id of child waiting for */
    /* files system */
    struct file* program_file;           /* name of program running */
    /* child parent synchronization */
    struct semaphore sema_child;    
    struct semaphore parent_child_control;   
  };

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

-get_args() split parameters and put them in argv[] with number equals to argc and give them to setup_stack()
-setup_stack() function: pushes them to the stack 
-we avoid overflowing the stack as when the size of the stack exceeds its limit size
 a page fault occurs which leads to terminating the process.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because strtok_r() is safer as it doesn't use global variables, 
so it doesn't lead to race condition, opposite to strtok().

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- Separating it lets the kernel  check the passed pointers,
    and values before the command execution.

-also it provides abstraction layer, as the shell is a user program,
 so the validation and separation are made in the user side not in the kernel side.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

 struct  user_file
 {
    struct list_elem elem;
    int fd;
    struct file* file;
 };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

- Each open call adds a new descriptor to the file descriptor table "increment fd" of the process giving it a new number.
- File descriptors are unique within each single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel. 
 At first wrapper chooses the suitable system call, then we pop fd, buffer and size from the stack.
 then we check if the fd value equals 0 then it is read, but if fd value equals 1 it will write to stdout.
 If fd has another value, we search for the file in the list of the process that we need to read or write.
 At last if the file is found inside the list, we read from or write inside the file else return -1.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
 
 -The least possible number is 1
 -The most possible number is 2

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

  Inside it process_wait is called with the id of the child to wait for
  and we find the child from childList using ge_child_thread() if we 
  found the child then parent waits on this child if we don't find the
  child then we return -1.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
   
   page faults and wrong pointers are checked before any system call in
   wrapper and if there is a problem happened we exit with -1 and the 
   process is terminated and also all resources dedicated for this
   process are freed before terminating.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

 -Using a semaphore called "parent_child_control" that provides synchronization,
  as after child thread starts execution, parent will sleep waiting the child to finish to wakes up.

 -Parent using "childStatus" variable that indicates if loading process succeeded or not,
  child can access this variable and modify it for its parent,
  through pointer it can access its parent and modify "childStatus" upon its current situation.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

-before C: When p calls wait(c), we make sema_up (C->parent_child_control) and make sema_down (p->sema_child). 
So the child process will start to execute and when it exits, it makes sema_up (p->sema_child).
-After C: This scenario won't happen because when the parent spawns the child,
 the child will be blocked until the parent is waiting for that child or the parent is terminated.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

-we used the first approach Because it is more clear, and easy to be understood,
 and doesn't need any special modification to other existing code.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

-Advantages:our implementation is simple and didn't include a lot of corner cases so we weren't worried about
issues such as race conditions. 
-Disadvantages:only one process could read from a file at a time 
If one process reads or writes in a file, no other files could be read or written
The default tid_t to pid_t mapping is the identity mapping.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

    No, we didn't change it.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?